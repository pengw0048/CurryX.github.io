import flash.filters.BlurFilter;import oxylus.TGallery.Thumbnail;import oxylus.TGallery.Overlay;import caurina.transitions.Tweener;class oxylus.TGallery.ThumbsGrid extends MovieClip {	private var TEdge:MovieClip;	private var BEdge:MovieClip;	private var Thumbs:MovieClip;	private var SBtn:MovieClip;	private var Mask:MovieClip;	private var Hit:MovieClip;	private var w:Number;	private var h:Number;	private var vMargin:Number;	private var hMargin:Number;	private var node:XMLNode;	private var idx:Number;	private var allowSlide:Boolean;	private var offset:Number;	private var totalHeight:Number;	private var toy:Number;	private var tvs:Number;	private var ths:Number;	private var maxp:Number;	private var slp:Number;	private var TnList:Array;	public static var draging:Boolean;	public function ThumbsGrid() {		initVars();		initClips();		resize();		Mouse.addListener(this);	}	private function initClips() {		Mask = eval(this._target+"/_a_");		TEdge = eval(this._target+"/_b_");		BEdge = eval(this._target+"/_c_");		SBtn = eval(this._target+"/_d_");		SBtn.onPress = SBtn_onPress;		SBtn.onRelease = SBtn_onRelease;		SBtn.onReleaseOutside = SBtn_onRelease;		SBtn._y = vMargin;		SBtn.stop();		SBtn._alpha = 0;		SBtn.enabled = false;		Hit = Mask.duplicateMovieClip("_hit_", this.getNextHighestDepth());		Hit._alpha = 0;		TEdge._height = BEdge._height=10;		this.setMask(Mask);		this.hitArea = Hit;		this._xscale = this._yscale=100;		this.useHandCursor = false;		this.enabled = false;	}	private function initVars() {		w = 800;		h = 478;		vMargin = toy=8;		hMargin = 10;		Thumbs = undefined;		idx = 0;		allowSlide = false;		offset = 0;		totalHeight = 0;		tvs = 1;		ths = 15;		maxp = 30;		slp = 0;		draging = false;	}	private function resize() {		Mask._x = Mask._y=0;		Mask._width = w;		Mask._height = h;		Hit._x = Hit._y=0;		Hit._width = w;		Hit._height = h;		TEdge._x = BEdge._x=0;		TEdge._width = BEdge._width=w;		TEdge._y = 0;		BEdge._y = h;		SBtn._x = w;		SBtn._y = Math.round(h/2-SBtn._height/2);		if (Thumbs != undefined) {			delete Thumbs.onEnterFrame;			Thumbs.filters = [];			Thumbs._y = toy;			arrangeThumbs();			checkIfSlideNeeded();			if (!allowSlide) {				Thumbs._y = vMargin;				toy = vMargin;			} else {				if (Thumbs._y<h-totalHeight-vMargin) {					Thumbs._y = h-totalHeight-vMargin;				}			}		}	}	public function set width(nw:Number) {		w = Math.round(nw);		resize();	}	public function set height(nh:Number) {		h = Math.round(nh);		resize();	}	public function get width():Number {		return w;	}	public function get height():Number {		return h;	}	private function setData(n:XMLNode) {		node = n;		allowSlide = false;		if (TnList != undefined) {			delete TnList;		}		TnList = new Array();		if (Thumbs == undefined) {			generate();		} else {			slideOut();		}	}	private function slideOut() {		generate();	}	private function generate() {		if (Thumbs != undefined) {			Thumbs.removeMovieClip();		}		Thumbs = this.createEmptyMovieClip("_thumb_slider_"+(idx++), this.getNextHighestDepth());		BEdge.swapDepths(this.getNextHighestDepth());		TEdge.swapDepths(this.getNextHighestDepth());		Thumbs._y = vMargin;		//		var p:XMLNode = node.firstChild;		var i = 0;		for (; p != null; p=p.nextSibling) {			var tn:MovieClip = Thumbs.attachMovie("IDThumbnail", "thumb"+i, Thumbs.getNextHighestDepth());			tn.data = p;			tn._alpha = 0;			TnList.push(tn);			if (offset == 0) {				offset = tn.height;			}			i++;		}		arrangeThumbs();		checkIfSlideNeeded();	}	private function arrangeThumbs() {		var cmc:MovieClip;		var pmc:MovieClip;		pmc = TnList[0];		pmc._x = hMargin;		pmc._y = 0;		var time:Number = .4;		var delay:Number = time;		Tweener.addTween(pmc, {_alpha:100, time:time, delay:delay, transition:"easeInSine"});		for (var i = 1; i<TnList.length; i++) {			cmc = TnList[i];			cmc._y = pmc._y;			cmc._x = pmc._x+pmc.width+ths;			if (cmc._x+cmc.width>w-2*hMargin) {				cmc._x = hMargin;				cmc._y += cmc._height+tvs;				delay += time/2;			}			pmc = cmc;			Tweener.addTween(pmc, {_alpha:100, time:time, delay:delay, transition:"easeInSine"});		}		Thumbs._x = Math.round(w/2-Thumbs._width/2-hMargin);		totalHeight = Math.round(cmc._y+cmc.height);	}	public function set data(n:XMLNode) {		setData(n);	}	public function get data():XMLNode {		return node;	}	private function checkIfSlideNeeded() {		allowSlide = false;		SBtn.enabled = false;		if (totalHeight>h-2*vMargin) {			allowSlide = true;			SBtn.enabled = true;			Tweener.addTween(SBtn, {_alpha:100, time:.3, transition:"easeInSine"});		} else {			Tweener.addTween(SBtn, {_alpha:0, time:.3, transition:"easeOutSine"});		}	}	private function onEnterFrame() {		if (!this.enabled) {			return;		}		if (!allowSlide) {			return;		}		if (!draging) {			return;		}		if (Thumbs == undefined) {			return;		}		if (slp>0) {			if (Thumbs._y+slp>vMargin) {				Thumbs._y = vMargin;			} else {				Thumbs._y += slp;			}		} else {			if (Thumbs._y+slp<h-totalHeight-vMargin) {				Thumbs._y = h-totalHeight-vMargin;			} else {				Thumbs._y += slp;			}		}		//updateAfterEvent();	}	private function onMouseMove() {		if (!this.enabled) {			return;		}		if (!allowSlide) {			return;		}		if (Thumbs == undefined) {			return;		}		var miny:Number = vMargin;		var maxy:Number = h-vMargin;		var dist:Number = maxy-miny;		var ym:Number = _ymouse<miny ? 0 : (_ymouse>h-miny ? h-2*miny : _ymouse-miny);		slp = Math.ceil(maxp*((dist/2-ym)/(dist/2)));		if (slp>0) {			SBtn.gotoAndStop(2);		} else if (slp<0) {			SBtn.gotoAndStop(3);		} else {			SBtn.gotoAndStop(1);		}	}	private function SBtn_onPress() {		with (this._parent) {			enabled = true;			slp = 0;			SBtn.startDrag(false, w, vMargin, w, h-vMargin-SBtn._height);		}		draging = true;	}	private function SBtn_onRelease() {		with (this._parent) {			enabled = false;			SBtn.gotoAndStop(1);			slp = 0;			SBtn.stopDrag();			Tweener.addTween(SBtn, {_y:Math.round(h/2-SBtn._height/2), time:.5, transition:"easeOutElastic"});		}		draging = false;	}	private function onMouseWheel(d:Number) {		if (Overlay.overlayOn) {			return;		}		if (!this.hitTest(_root._xmouse, _root._ymouse, true)) {			return;		}		if (!allowSlide) {			return;		}		if (d<0 && Thumbs._y == h-totalHeight-vMargin) {			return;		}		if (d>0 && Thumbs._y == vMargin) {			return;		}		if (d == 0) {			return;		}		var dr:Number = d/Math.abs(d);		var ty:Number = Thumbs._y+dr*(offset+ths);		if (ty<h-totalHeight-vMargin) {			ty = h-totalHeight-vMargin;		}		if (ty>vMargin) {			ty = vMargin;		}		if (ty>Thumbs._y) {			SBtn.gotoAndStop(2);		} else {			SBtn.gotoAndStop(3);		}		function func() {			with (this._parent) {				SBtn.gotoAndStop(1);			}		}		Tweener.addTween(Thumbs, {_y:Math.round(ty), time:.3, transition:"easeOutQuad", onComplete:func});	}}